import logging
import os
from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import Application, MessageHandler, filters

# Configura√ß√£o de Log (para ajudar na depura√ß√£o no Cloud Functions logs)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Vari√°veis de Ambiente ---
# √â CR√çTICO que voc√™ n√£o coloque seu TOKEN diretamente no c√≥digo em produ√ß√£o.
# O TOKEN ser√° passado como uma vari√°vel de ambiente no Google Cloud Functions.
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("A vari√°vel de ambiente 'TELEGRAM_BOT_TOKEN' n√£o est√° configurada.")
    # Em produ√ß√£o, voc√™ pode querer levantar uma exce√ß√£o ou ter um comportamento padr√£o.
    # Para testes locais, pode-se colocar o token aqui temporariamente:
    # TOKEN = "SEU_TOKEN_AQUI_PARA_TESTES_LOCAIS"

# Dicion√°rio de respostas baseado em palavras-chave
respostas_automatica = {
    "pc": "Vida de pcista",
    "jogo": "zoomer",
    "ps": "console de judeu",
    "playstation": "console de judeu",
    "pincel": "Come√ßou a bajula√ß√£o",
    "traveco": "amo todos",
    "ocidente": "acabou, judeu venceu",
    "xbox": "s√≥ sentar, deitar, jogar e dormir",
    "gamepass": "faz o x",
    "sentiu": "zoomer momento",
    "doutor": "zoomer",
    "goty": "bridget",
    "judeu": "üëÉüèª",
    "bridget": "√© um homi",
    # Adicione mais pares de perguntas e respostas
}

# --- Fun√ß√µes do Bot ---
async def responder_mensagem(update: Update, context):
    if not update.message:
        logger.warning("Update received without a message.")
        return

    mensagem_recebida = update.message.text
    if not mensagem_recebida:
        logger.warning("Message received without text.")
        return

    # Convertendo para min√∫sculas para facilitar a compara√ß√£o
    mensagem_para_analisar = mensagem_recebida.lower()
    
    chat_type = update.message.chat.type # 'private', 'group', 'supergroup'
    user_info = f"{update.effective_user.full_name} ({update.effective_user.id})"
    
    logger.info(f"Mensagem recebida em {chat_type} de {user_info}: {mensagem_recebida}")

    resposta_encontrada = False
    for palavra_chave, resposta_fixa in respostas_automatica.items():
        if palavra_chave in mensagem_para_analisar:
            await update.message.reply_text(resposta_fixa)
            resposta_encontrada = True
            break
    
    if not resposta_encontrada:
        # Resposta padr√£o se nenhuma palavra-chave for encontrada
        # Voc√™ pode personalizar ou remover esta parte se preferir que o bot n√£o responda
        # a mensagens n√£o reconhecidas.
        #await update.message.reply_text("Desculpe, n√£o entendi. Tente de outra forma ou use uma das palavras-chave: 'ol√°', 'ajuda', 'pre√ßo', 'contato'.")
        pass # N√£o faz nada se n√£o encontrar palavra-chave e n√£o for uma men√ß√£o direta


# --- Configura√ß√£o da Aplica√ß√£o Flask para Webhook ---
# Criamos uma inst√¢ncia do Flask.
# Esta ser√° a "porta de entrada" para as requisi√ß√µes HTTP do Telegram.
app = Flask(__name__)

# O objeto Application do python-telegram-bot √© criado globalmente.
# Ele ser√° usado para processar os updates que o Flask receber.
application = Application.builder().token(TOKEN).build()
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder_mensagem))


# --- Fun√ß√£o Principal para o Google Cloud Functions ---
# Esta √© a fun√ß√£o que o Google Cloud Functions vai chamar quando receber uma requisi√ß√£o HTTP.
# O nome desta fun√ß√£o √© importante e ser√° configurado no Cloud Functions.
async def telegram_webhook_handler(request):
    """Handles incoming Telegram webhook requests."""
    
    # O Google Cloud Functions recebe o request como um objeto Flask.
    # Precisamos extrair o JSON do corpo da requisi√ß√£o, que √© a atualiza√ß√£o do Telegram.
    try:
        req_json = request.get_json(silent=True)
        if not req_json:
            logger.error("No JSON payload received or invalid JSON.")
            return jsonify({"status": "error", "message": "Invalid JSON"}), 400
        
        # Converte o JSON em um objeto Update do python-telegram-bot
        update = Update.de_json(req_json, application.bot)
        
        # Processa a atualiza√ß√£o com os handlers que voc√™ configurou
        await application.process_update(update)
        
        # Retorna uma resposta de sucesso para o Telegram
        return jsonify({"status": "ok"}), 200

    except Exception as e:
        logger.exception(f"Erro ao processar webhook: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500